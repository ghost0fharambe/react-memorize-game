{"version":3,"sources":["components/Navbar/index.js","components/Image/index.js","components/Wrapper/index.js","components/Title/index.js","components/WinFlash/index.js","components/LossFlash/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","id","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","resetGame","score","wins","losses","Image","alt","name","src","key","height","width","guess","Wrapper","children","Title","WinFlash","LossFlash","gameFlash","role","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffleImages","array","images","state","i","randomIndex","Math","floor","random","length","includes","setState","makeGuess","gameLoss","gameWin","newRound","guessedArray","incrementLosses","push","incrementScore","checkWin","incrementWins","_this2","components_LossFlash","components_WinFlash","Fragment","components_Navbar","components_Wrapper","components_Title","map","image","components_Image","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.504baa38.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n\treturn (\r\n\t\t<nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<a className=\"navbar-brand\" href=\"/\" id=\"logo\">Created by: Adam Karman</a>\r\n\t\t\t\t<button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo01\"\r\n\t\t\t\t\taria-controls=\"navbarTogglerDemo01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n\t\t\t\t\t<span className=\"navbar-toggler-icon\"></span>\r\n\t\t\t\t</button>\r\n\t\t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\r\n\t\t\t\t\t<ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<p className=\"nav-link\" id=\"reset-button\" onClick={() => props.resetGame()}>Reset Game</p>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<p className=\"nav-link\">Score: {props.score}</p>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<p className=\"nav-link\">Wins: {props.wins}</p>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"nav-item\">\r\n\t\t\t\t\t\t\t<p className=\"nav-link\">Losses: {props.losses}</p>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</nav>\r\n\t)\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Image(props) {\r\n\treturn (\r\n\t\t<div className=\"img-container\">\r\n\t\t\t<img\r\n\t\t\t\talt={props.name}\r\n\t\t\t\tsrc={props.src}\r\n\t\t\t\tkey={props.id}\r\n\t\t\t\tclassName=\"img-thumbnail\"\r\n\t\t\t\theight=\"300px\"\r\n\t\t\t\twidth=\"300px\"\r\n\t\t\t\tonClick={() => props.guess(props.id)}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Image;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n\treturn <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return (\n    <h1 className=\"title\">{props.children}</h1>\n  );\n}\n\nexport default Title;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction WinFlash(props) {\r\n\treturn <div className=\"alert alert-success\">You Win!</div>\r\n};\r\n\r\nexport default WinFlash;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction LossFlash(props) {\r\n\treturn <div className=\"alert alert-danger\" role=\"alert\">Game Over!</div>\r\n};\r\n\r\nexport default LossFlash;","import React, { Component } from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Image from \"./components/Image\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport WinFlash from \"./components/WinFlash\";\nimport LossFlash from \"./components/LossFlash\";\nimport images from \"./pictures.json\";\nimport './App.css';\n\nlet score;\nlet wins;\nlet losses;\nlet gameFlash;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images,\n      guessedArray: [],\n      score: 0,\n      losses: 0,\n      wins: 0,\n      gameLoss: false,\n      gameWin: false\n    };\n  };\n\n  //Function to shuffle images\n  shuffleImages = () => {\n    let array = [];\n    let images = this.state.images;\n\n    for (let i in images) {\n      let randomIndex = Math.floor(Math.random() * images.length);\n      while (array.includes(images[randomIndex])) {\n        randomIndex = Math.floor(Math.random() * images.length);\n      }\n      array[i] = images[randomIndex];\n      this.setState({ images: array });\n    };\n  };\n\n  //Function to handle guessing logic\n  makeGuess = id => {\n    //If the game has been won/lost, start new round\n    if (this.state.gameLoss || this.state.gameWin) {\n      this.newRound();\n    }\n\n    let array = [];\n    let guessed = this.state.guessedArray;\n\n    if (guessed.includes(id)) {\n      this.setState({\n        gameLoss: true,\n        gameWin: false\n      });\n      this.incrementLosses();\n    } else {\n      array.push(id);\n      this.incrementScore();\n      this.setState({ guessedArray: array })\n      this.shuffleImages();\n    };\n  };\n\n  //Function to reset Round\n  newRound = () => {\n    this.setState({\n      images: images,\n      guessedArray: [],\n      score: 0,\n      gameLoss: false,\n      gameWin: false\n    });\n  }\n\n  //Function to increment Score\n  incrementScore = () => {\n    this.checkWin();\n    score = this.state.score;\n    score++;\n    this.setState({ score: score });\n  };\n\n  //Function to increment Losses\n  incrementLosses = () => {\n    losses = this.state.losses;\n    losses++;\n    this.setState({ losses: losses });\n  };\n\n  //Function to increment Wins\n  incrementWins = () => {\n    wins = this.state.wins;\n    wins++;\n    this.setState({ wins: wins });\n  }\n\n  //Function to check if game win\n  checkWin = () => {\n    if (this.state.score === 8) {\n      this.incrementWins();\n      /* this.setState({\n        score: 0,\n        gameWin: true,\n        gameLoss: false\n      }); */\n      this.newRound()\n    }\n  }\n\n  //Function to reset game\n  resetGame = () => {\n    this.setState({\n      images,\n      guessedArray: [],\n      score: 0,\n      losses: 0,\n      wins: 0,\n      gameLoss: false,\n      gameWin: false\n    });\n  }\n\n  render() {\n    const gameLoss = this.state.gameLoss;\n    const gameWin = this.state.gameWin;\n    if (gameLoss) {\n      gameFlash = <LossFlash />\n    } else if (gameWin) {\n      gameFlash = <WinFlash />\n    } else if (!gameWin && !gameLoss) {\n      gameFlash = null;\n    }\n\n    return (\n      <>\n        <Navbar\n          score={this.state.score}\n          wins={this.state.wins}\n          losses={this.state.losses}\n          resetGame={this.resetGame}\n        />\n        <div>\n          <Wrapper>\n            <Title>\n              Archer Memory Game!\n            {gameFlash}\n            </Title>\n            {this.state.images.map(image => (\n              <Image src={image.src} key={image.id} id={image.id} guess={this.makeGuess} />\n            ))}\n          </Wrapper>\n        </div>\n      </>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}